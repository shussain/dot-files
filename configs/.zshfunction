function boot() {
    BOOTTIME=`who -b |cut -c34-49`
    echo Boot time: $BOOTTIME
}

function json_validate {
    python -c "import json; fd=open('$1'); answer = json.dumps(json.load(fd), indent=4); print(answer)"
}

grepc() {
    grep -rin --color=auto --exclude-dir={.bzr,.cvs,.git,.hg,.svn} --include=\*.{c,h,y,l} $1 .
}

# print available colors and their numbers
# Taken from https://github.com/nicknisi/dotfiles/blob/master/zsh/functions.zsh
function colours() {
    for i in {0..255}; do
        printf "\x1b[38;5;${i}m colour${i}"
        if (( $i % 5 == 0 )); then
            printf "\n"
        else
            printf "\t"
        fi
    done
}

# Extract archives - use: extract <file>
# Credits to http://dotfiles.org/~pseup/.bashrc
function extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2) tar xjf $1 ;;
            *.tar.gz) tar xzf $1 ;;
            *.bz2) bunzip2 $1 ;;
            *.rar) rar x $1 ;;
            *.gz) gunzip $1 ;;
            *.tar) tar xf $1 ;;
            *.tbz2) tar xjf $1 ;;
            *.tgz) tar xzf $1 ;;
            *.zip) unzip $1 ;;
            *.Z) uncompress $1 ;;
            *.7z) 7z x $1 ;;
            *) echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

reminder() {
  echo notify-send -t 0 \'$2\' | at $1
  echo "Reminder: $2 set for $1"
}

add_one_minute() {
    time_in_epoch=`date -d $1 +%s`
    s_time=$((time_in_epoch+60)) # Increment by 1 minute
    set_time=`date -d "1970-01-01 00:00:00 UTC $s_time seconds" +"%H:%M"` # get time in %H:%M format
    echo $set_time
}


reminders() {
    set_time=$1
    reminder $set_time $2

    set_time=`add_one_minute $set_time`
    reminder $set_time $2

    set_time=`add_one_minute $set_time`
    reminder $set_time $2

    set_time=`add_one_minute $set_time`
    reminder $set_time $2

    set_time=`add_one_minute $set_time`
    reminder $set_time $2
}

# this could be an alias but better to keep it next to similar functions
reminders_clear() {
		#atq |cut -f 1 | tr '\n' ' ' |xargs atrm
		atq |cut -f 1 | xargs atrm
}
